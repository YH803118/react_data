AND 연산자
{show && <p>렌더링</p>}
 - show가 true면 렌더링, false면 렌더링하지 않음

OR 연산자
 - AND와 정반대

삼항 연산자
{toggle ? <p>OK</p> : <p>NO</p>}
 - toggle이 true면 OK, false면 NO를 렌더링

주의할 점.
num 값이 0일 때는 false 로 계산되니까 뒤의 값을 계산하지 않기 때문에
아무것도 렌더링 하지 않는 코드 같습니다.
하지만 앞에서 살펴봤듯이 숫자 0은 0으로 렌더링 되는데요.

그래서 처음 실행했을 때 숫자 0이 렌더링 되고
'더하기' 버튼을 눌러서 num 값이 증가하면 num이 0 보다 크다! 가 렌더링 됩니다.
그래서 이런 경우엔 아래처럼 보다 명확한 논리식을 써주는 게 안전합니다.
true 나 false 값은 리액트에서 렌더링 하지 않기 때문이죠!

{(num > 0) && <p>num이 0 보다 크다!</p>}


비동기로 stata를 변경할 때 주의할 점.
렌더링 된 후 이전값을 사용하여 실행하는 경우가 있는데
이런 경우 콜백함수를 사용해 해결
setItems([...items, ...reviews]) => setItems((prevItems)=>[...prevItems, ...reviews])
prevItems라는 파라미터를 받아서 렌더링한다!

커서 기반 페이지네이션?

- 마지막으로 불러온 친구를 기준으로 함.
- 마지막 좌표를 불러오기 위해
  console.log(paging) 을 해보면 nextCursor 를 불러와야 하는데
  const { paging: {nextCursor} } = await getFoods(options);
  이런 식으로 가져 와야함.
